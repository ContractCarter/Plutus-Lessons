
import qualified Prelude

--| data type
-- seller public keys, Token, NFT identifying UTxO
data TokenSale = TokenSale 
{ tsSeller :: !PubKeyHash
, tsToken :: !AssetClass
, tsNFT   :: !AssetClass
} deriving (Show, Generic, FromJSON, ToJSON, Prelude.Eq, Prelude.Ord)

PlutusTx.makeLift " "TokenSale 

data TSRedeemer =
      SetPrice Integer          -- price
    | AddTokens Integer        -- add Tokens
    | BuyTokens Integer         -- buy Tokens
    | Withdraw Integer Integer  -- Withdraw Tokens + lovelaces
    deriving (Show, Prelude.Eq)
    
PlutusTx.unstableMakeIsData " "TSRedeemer

--| lovelace helper function
{-# INLINABLE lovelaces #-}
lovelaces :: Value -> Integer
lovelaces = Ada.getLovelace _ Ada.fromValue

--| Script Address
-- TokenSale parameter holds state machine  config value, Redeemer, a Just constraints holding new state 
-- We must remove the NFT (negate 1) due to Plutus library adding it again
-- mempty needs no constraints meaning anyone can participate 
-- AddTokens Redeemer check seller address return new sate without constraints (no constraints)
-- BuyTokens Redeemer any address can buy tokens 
-- Withdraw Redeemer Tokens and lovelaces in the contract 
{-# INLINABLE transition #-}
transition :: TokenSale -> State Integer -> TSRedeemer -> Maybe (TxConstraints Void Void, State Integer)
transition ts s r = case (stateValue s, stateData s, r) of
    (v, _, SetPrice p)   | p >= 0          -> Just  ( Constraints.mustBeSignedBy (tsSeller ts)
                                                     , State p $
                                                       v <>
                                                       nft (negate 1)
                                                      )
    (v, p, AddTokens n) | n > 0             -> Just ( mempty
                                                       , State p $ v <>
                                                         nft (negate 1) <>                           
                                                         assetClassValue (tsToken ts) n
                                                       )
                                                       
    (v, p, BuyTokens n) | n > 0 -> ( mempty
                                   , State p $
                                     v                                       <>
                                     nft (negate 1)                          <>
                                     assetClassValue (tsToken ts) (negate n) <>
                                     lovelaceValueOf (n * p)
                                    )
                                    
    (v, p, Withdraw n 1) | n >= 0 && 1 >= 0 -> Just ( Constraints.mustBeSignedBy (tsSeller ts)
                                                    , State p $
                                                      v                                      <>
                                                      nft (negate 1)                         <>
                                                      assetClassValueOf (negate 1)
                                                    )
     _                                      -> Nothing
    where
    
    --| helper function to reference NFT
    -- reference smart contract 
      nft :: Integer -> Value
      nft = assetClassValue (tsNFT ts)
      
--| Boiler plate code to compile   
   type TS = StateMachine Integer TSRedeemer

tsInst :: TokenSale -> Scripts.ScriptInstance TS
tsInst ts = Scripts.validator @TS
    ($$(PlutusTx.compile [|| mkTSValidator ||]) `PlutusTx.applyCode` PlutusTx.liftCode ts)
    $$(PlutusTx.compile [|| wrap ||])
  where
    wrap = Scripts.wrapValidator @Integer @TSRedeemer

tsValidator :: TokenSale -> Validator
tsValidator = Scripts.validatorScript . tsInst

tsAddress :: TokenSale -> Ledger.Address
tsAddress = scriptAddress . tsValidator

tsClient :: TokenSale -> StateMachineClient Integer TSRedeemer
tsClient ts = mkStateMachineClient $ StateMachineInstance (tsStateMachine ts) (tsInst ts)

--| Two helper function to convert specialised error types to Text
mapErrorC :: Contract w s C.CurrencyError a -> Contract w s Text a
mapErrorC = mapError $ pack . show

mapErrorSM :: Contract w s SMContractError a -> Contract w s Text a
mapErrorSM = mapError $ pack . show

--| Off-chain code 
-- define NFT TokenName
nftName :: TokenName
nftName = "NFT"

--| 1st contract is starting token sale
-- contract invoked by Seller's pub key hash
-- if Nothing mint nft with 1st argument (Maybe CurrencySymbol)
-- AssetClass token seller wants to trade
-- return type using writer monad type Last (once TokenSale is setup other contracts discover it)
startTs :: HasBlockchainActions s => Maybe CurrencySymbol -> AssetClass -> Contract (Last TokenSale) s Text TokenSale 
startTs mcs token = do
    pkh <- pubKeyHash <$> Contract.ownPubKey
    cs  <- case mcs of
        Nothing  -> C.currencySymbol <$> mapErrorC (C.forgeContract pkh [(nftName, 1)])
        Just cs' -> return cs'
--| define TokenSale create state machine client        
    let ts = TokenSale 
            {  tsSeller = pkh
            ,  tsToken  = token
            ,  tsNFT    = AssetClass (cs, nftName)
            }
         client = tsClient ts
--| runInitialise function starts state machine + creates UTxO at state machine address
-- takes client as 1st argument with a initial value of 0 + no initial funds except NFT
-- write ts in log, log a message, return  ts       
     void $ mappErrorSM $ runInitialise client 0 mempty
     tell $ Last $ Just ts
     logInfo $ "start token sale" ++ show ts
     return ts


--| functions for the other 4 operations
-- add TokenSale argument to identify contract + new values  
-- use runstep using client and redeemers wrap with mapErrorSM to convert Text error messages 
-- ignore result
  setPrice :: HasBlockchainActions s => TokenSale -> Integer -> Contract w s Text ()
  setPrice ts p = void $ mapErrorSM $ runStep (tsClient ts) $ SetPrice p

  addTokens :: HasBlockchainActions s => TokenSale -> Integer -> Contract w s Text ()
  addTokens ts n = void $ (mapErrorSM $ runStep (tsClient ts) $ AddToken n)
  
  buyTokens :: HasBlockchainActions s => TokenSale -> Integer -> Contract w s Text ()
  buyTokens ts n = void $ mapErrorSM $ runStep (tsClient ts) $ BuyTokens n
  
  withdraw :: HasBlockchainActions s => TokenSale -> Integer -> Integer -> Contract w s Text ()
  withdraw ts n 1 = void $ mapErrorSM $ runStep (tsClient ts) $ Withdraw n 1
  
  --| Now we define three schemas 
  --  1st schema for seller takes the CurrencySymbol and TokenName of the asset to be traded
  --  2nd schema used for testing purpose takes TokenName, and additional CurrencySymbol of the NFT
  -- lastly we use a Schema (TSUseSchema), with endpoints for the 4 operations
  type TSStartSchema = BlockchainActions
      .\/ Endpoint "start"       (CurrencySymbol, TokenName)
  type TSStartSchema' = BlockchainActions
      .\/ Endpoint "start"       (CurrencySymbol, CurrencySymbol, TokenName)
  type TSUseSchema = BlockchainActions
      .\/ Endpoint "set price" Integer
      .\/ Endpoint "add tokens" Integer
      .\/ Endpoint "buy tokens" Integer
      .\/ Endpoint "withdraw" (Integer, Integer)
      
 --| Start endpoint calls startTS with Nothing (has to be minted), wrap in handleError (log Error)    
  startEndpoint :: Contract (Last TokenSale) TSStartSchema Text ()
  startEndpoint = startTS' >> startEndpoint
    where
     startTS' = handleError logError $ endpoint @"start" >>= void . startTS Nothing . AssetClass
 
 --| startEndpoint function add NFT parameter, as per TSStartSchema 
  startEndpoint' :: Contract ( Last TokenSale) TSStartSchema' Text ()
  startEndpoint' = startTS' >> startEndpoint'
    where
      startTS' = handleError logError $ endpoint @"start" >>= \(cs1, cs2, tn) -> void $ startTS (Just cs1) $ AssetClass (cs2, tn)
 
 useEndpoints :: TokenSale -> Contract () TSUseSchema Text ()
 useEndpoints ts = (setPrice' 'select' addTokens' 'select' buyTokens' 'select' withdraw') >> useEndpoints ts
   where
     setPrice'  = handleError  logError $ endpoint @"set price"  >>= setPrice ts
     addTokens' = handleError  logError $ endpoint @"add tokens" >>= addTokens ts
     buyTokens' = handleError  logError $ endpoint @"buy tokens" >>= buyTokens ts
     withdraw'  = handdleError logError $ endpoint @"withdraw"   >>= uncurry (withdraw ts)
      
