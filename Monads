
The creative act of designing software in a manner that controls complexity is the creative act of creating functions that can be combined
Create complexity by starting simple


Monads are pure functions that Manage side effects

--|(>>=)         :: IO a            -> (a -> IO b)             -> IO b
-- bindMaybe     :: Maybe a         -> (a -> Maybe b)          -> Maybe b
-- bindEither    :: Either String a -> (a -> Either String b)  -> Either
-- bindWriter    :: Writer a        -> (a -> IO b)             -> Writer

--| constructors   
--
-- return              :: a -> IO a
-- Just & Nothing      :: a -> Maybe a
-- Right & Left        :: a -> Either String a
-- (\a -> Writer a []) :: a -> Writer a




--|Maybe throws an Exceptions can stop computation
-- define bindMaybe with 2 parameters Maybe a & (a -> Maybe b)
-- returns Nothing or Just a function of f x value 

bindMaybe :: Maybe a -> (a -> Maybe b) -> Maybe b
bindMaybe Nothing _ = Nothing 
bindMaybe (Just x) f = f x

foo' :: String -> String -> String -> Maybe Int
foo' x y z = readMaybe x 'bindMaybe' \k ->
             readMaybe y 'bindMaybe' \l ->
             readMaybe z 'bindMaybe' \m -> 
              just (k + l + m)
              
              
--|Either throws Left or Right Value 
-- define bindEither with 2 parameters Either String a & (a -> Either String b)
-- returns Left Error or Right function of f x value 
              
bindEither :: Either String a -> (a -> Either String b) -> Either String b
bindEither (Left err) _ = Left err 
bindEither (Right x) f = f x

foo' :: String -> String -> String -> Either String Int
foo' x y z = readEither x 'bindEither' \k ->
             readEither y 'bindEither' \l ->
             readEither z 'bindEither' \m -> 
              Right (k + l + m)
              
             
--| Writer is a custom data type that writes Log messages
-- (number) helper function generates writer Data type
-- Tell helper function takes in list of strings
-- foo takes in 3 (Writer)
-- let defines s(sum of all) and Writer 

  data Writer a = Writer a (String)
       deriving Show 
       
 number :: Int -> writer Int
 number n = Writer n $ ["number: " ++ show n}
 
 tell :: [String] -> Writer ()
 tell = Writer ()

foo :: Writer Int -> Writer Int -> Writer Int -> Writer Int
foo (Writer k xs) (Writer 1 ys) (Writer m zs) =
   let
     s = k + l + m
     writer _ us = tell ["sum: " ++ show s]
   in
     writer s $ xs ++ ys ++ zs ++ us

--| Monad abstract functions
bind (>>=) (>>), return, fail
class Monad m where
   (>>=) :: m a -> ( a -> mb) -> m b 
   (>>)  :: m a -> m b        -> m b
   return ::  a               -> m a
   fail   :: String -> m a
   
 
Monoids is a collection of things + a rule  for combining the things
That rule obeys some rules

--| In Monoids
-- the rule of combining things must satisfy the associativity rule
-- (doesn't matter how you group)
(x + y)%12      
 + %            - rule for combining
 
 --| In Monoids
 -- Second rule is that Monoids must contain a special member that x combines with special member is always x & special member combined with x is x
 x + 12 = x
 12 + x = x
