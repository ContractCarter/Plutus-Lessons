
module Week07.Test where

import            Control.Monad              hiding (fmap)
import            Control.Monad.Freer.Extras as Extras
import            Data.Default               (Default (..))
import qualified  Data.Map                   as Map
import            Ledger
import            Ledger.TimeSlot
import            Ledger.Value
import            Ledger.Ada                 as Ada
import            Plutus.Trace.Emulator      as Emulator
import            PlutusTx.Prelude
import            Prelude                    (IO, Show (..))
import            Wallet.Emulator.Wallet

import            Week07.EvenOdd

-- testfunction takes the first and second players' choices
-- testfunction uses runEmulatorTraceIO, setting up wallet distributions using EmulatorConfig
test = do
    test' Zero Zero
    test' Zero One
    test' One Zero
    test' One One 
    
 test' :: GameChoice -> GameChoice -> IO ()
 test' c1 c2 = runEmulatorTraceIO' def emCfg def $ myTrace c1 c2
   where
     emCfg :: EmulatorConfig
     emCfg = EmulatorConfig $ Left $ Map.fromList
         [ (Wallet 1, v <> assetClassValue (AssetClass (gameTokenCurrency, gameTokenName)) 1)
         , (Wallet 2, v)
         ]
         
      v :: Value
      v = Ada.lovelaceValueOf 1_000_000_000
      
  gameTokenCurrency :: CurrencySymbol
  gameTokenCurrency = "ff"
  
  gameTokenName :: TokenName
  gameTokenName = "STATE TOKEN"

  myTrace :: GameChoice -> GameChoice -> EmulatorTrace ()
  myTrace c1 c2 = do
