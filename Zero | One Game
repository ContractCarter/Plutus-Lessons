--| define data type Game + use parameters
-- players define by public key
-- # of lovelace to stake 
-- Two slots (gPlayDeadline = make a move) + (gRevealDeadline = show how u won)
-- gToken = Arbitrary NFT to identify UTXO 

data Game = Game
    { gFirst          :: !PubKeyHash
    , gSecond         :: !PubKeyHash
    , gStake          :: !Integer
    , gPlayDeadline   :: !Slot
    , gRevealDeadline :: !Slot
    , gToken          :: !AssetClass
    } deriving (Show, Generic, FromJSON, ToJSON, Prelude.Eq, Prelude.Ord)

--| Next, we define the two moves that the players can make (Zero & One)
-- need Plutus Eq for the instance,
-- Inlinable pragma on Plutus Eq for the GameChoice
data GameChoice = Zero | One
    deriving (Show, Generic, FromJSON, ToJSON, ToSchema, Prelude.Eq, Prelude.Ord)

instance Eq GameChoice where
    {-# INLINABLE (==) #-}
    Zero == Zero = True
    One  == One  = True
    _    == _    = False

--| For state, we will use a type called GameDatum.
-- ByteString is the hash that the first player submits
-- Maybe GameChoice is either Just the move of the second player, or Nothing
 data GameDatum = GameDatum Bytestring (Maybe GameChoice)
 deriving Show
 
 instance Eq GameDatum where
 {-# INLINABLE (==) #-}
 GameDatum bs mc == GameDatum bs' mc' = (bs == bs') && (mc == mc')

--| Redeemer data type
-- Play second player makes a move
-- Reveals shows 1st players encrypted choice
-- Claim shows if 1st or 2nd won based on the play and reveal deadline
 data GameRedeemer = Play GameChoice | Reveal ByteString | ClaimFirst | ClaimSecond

    deriving Show
    
--| helper function of lovelace values    
 
 lovelaces :: Value -> Integer 
 lovelaces = Ada.getLovelace . Ada.fromValue
 
--| helper function of gameDatum
--| Maybe Monad bind caputures effects of getting Datum Hash
-- Output has a Datum, succeeds get Datum Hash (dh)
-- Datum Hash turns into Datum, succeeds get d
-- Datum (d) Maybe turns into GameDatum

gameDatum :: TxOut -> (DatumHash -> Maybe Datum) -> Maybe GameDatum
gameDatum o f = do
    dh        <- txOutDatum o
    Datum d   <- f dh
    PlutusTx.fromData d
    
    
--| Core business logic mkGameValidator 
mkGameValidator :: Game -> ByteString -> ByteString -> GameDatum -> GameRedeemer -> ScriptContext -> Bool
mkGameValidator game bsZero' bsOne' dat red ctx =

--| first situation second player has not yet moved, and they are just now making their move
-- check 2nd player sign transaction
-- check 1st player stake is in input
-- check 2nd player stake added to total stake in output
-- check output datum hash + 2nd player choice
-- check PlayDeadline
-- check NFT inside the output

    traceIfFalse "token missing from input" (assetClassValueOf (txOutValue ownInput) (gToken game) == 1) &&
    case (dat, red) of
        (GameDatum bs Nothing, Play c) -> 
             traceIfFalse "not signed by second player"  (txSigneBy info (gSecond game))                                     &&
             traceIfFalse "first player's stake missing" (lovelaces (txOutValue ownInput) == gStake game)                    &&
             traceIfFalse "second player's stake missing (lovelaces (txOutValue ownOutput) == (2 * gstake game))             &&
             traceIfFalse "wrong output datum"           (outputDatum == GameDatum bs (Just c))                              &&
             traceIfFalse "missed deadline"              (to (gPlayDeadline game) 'contains' txInfoValidRange info)          &&
             traceIfFalse "token missing from output"    (assetClassValueOf (txOutValue ownOutput) (gToken game) == 1)       

--| Second situation  1st players discover he won, and has to reveal it
-- to prove the winnings must check reveal nonce 
-- check signed by first player
-- check nonce matches with hash submitted earlier
-- check if done before reveal deadline
-- Input must contain both players stake
-- NFT must go back to 1st player

(GameDatum bs (Just c), Reveal nonce) ->
    traceIfFalse "not signed by first player"   (txSignedBy info (gFirst game))                                              &&
    traceIfFalse "commit mismatch"              (checkNonce bs nonce c)                                                      &&
    traceIfFalse "missed deadline"              (to (gRevealDeadline game) 'contains' txInfoValidRange info)                 &&
    traceIfFalse "wrong stake"                  (lovelaces (txOutValue ownInput) == (2 * gStake game))                       &&
    traceIfFalse "NFT must go to first player"  nftToFirst
    
--| 2nd player doesn't move past deadline, so 1st player claims his stake
-- check  1st player sig
-- check 2nd player stake
-- check 1st player gets NFT back

(GameDatum _ Nothing, ClaimFirst) ->
    tracrIfFalse "not signed by first player"  (txSignedBy info (gFirst game))
    traceIfFalse "too early"                    (from (1 + gPlayDeadline game) 'contains'n txInfoVaidRange info)
    traceIfFalse "wrong stake"                  (lovelaces (txOutValue ownInput) == gStake game)
    traceIfFalse "NFT must go to first player"  nftToFirst
    
--| Both players moved, 1st player doesn't reveal nonce pass deadline
--  2nd player claims stake 
--  check second player sig
--  check stake #
--  check  1st player gets NFT back
(GameDatum _ (Just _), ClaimSecond) ->
    traceIfFalse "not signed by second player"  (txSignedBy info (gSecond game))                                            &&
    traceIfFalse "to early"                     (from (1 + gRevealDeadline game) 'contains' txInfoValidRange info)          &&
    traceIfFalse "wrong stake"                  (lovelaces (txOutValue ownInput) == ( 2* gStake game)                       &&
    traceIfFalse "NFT must go to first player"  nftToFirst 
    
--| Boilerplate code
info :: TxInfo
info = scriptContextTxInfo ctx

ownInput :: TxOut
ownInput = case findOwnInput ctx of
    Nothing -> traceError "game input missing"
    Just i  -> txInInfoResolved i

ownOutput :: TxOut
ownOutput = case getContinuingOutputs ctx of
    [o] -> o
    _   -> traceError "expected exactly one game output"
    
    
outputDatum :: GameDatum
outputDatum = case gameDatum ownOutput (`findDatum` info) of
    Nothing -> traceError "game output datum not found"
    Just d  -> d
    
--| check the hash of the nonce linked to GameChoice
-- helper function convert GameChoice to ByteSting Zero' & One'
checkNonce :: ByteString -> ByteString -> GameChoice -> Bool
checkNonce bs nonce cSecond = sha2_256 (nonce 'concatenate' cFirst) == bs
  where
    cFirst :: ByteString
    cFirst = case cSecond of
        Zero -> bsZero'
        One  -> bsOne'
        
 --| helper function NFT goes back to 1st player after        
 nftToFirst :: Bool
 nftToFirst = assetClassValueOf (valuePaidTo info $ gFirst game) (gToken game) == 1
 
 data Gaming 
 instance Scripts.ScriptType Gaming where
     type instance DatumType Gaming = GameDatum
     type instance RedeemerType Gaming = GameRedeemer
    
  bsZero, bsOne :: ByteString 
  bsZero = "0"
  bsOne =  "1"
  
  --| compile code
  gameInst :: Game -> Scripts.ScriptInstance Gaming
  gameInst game = Scripts.validator @Gaming
      ($$(PlutusTx.compile [|| mkGameValidator ||])
          'PlutusTx.applyCode' PlutusTx.liftCode game
          'PlutusTx.applyCode' PlutusTx.liftCode bsZero
          'PlutusTx.applyCode' PlutusTx.liftCode bsOne)
        $$(PlutusTx.compile [|| wrap ||])
      where
        wrap = Scripts.wrapValidator @GameDatum @VGameRedeemer
        
 --| Boilerplate code        
   gameValidator :: Game -> Validator 
   gameValidator = Scripts.validatorScript . gameInst
   
   gameAddress :: Game -> Ledger.Address
   gameAddress = scriptAddress . gameValidator
  
  --| find correct UTxO with NFT
   findGameOutput :: HasBlockchainActions s => Game -> Contract w s Text (Maybe (TxOutRef, TxOutTx GameDatum))
   findGameOutput game = do 
       utxos <- utxoAt $ gameAddress game 
       return $ do 
       (oref, o) <- find f $ Map.toList utxos
  where
    f :: (TxOutRef, TxOutTx) -> Bool
    f (_, o) = assetClassValueOf (txOutValue $ txOutTxOut o) (gToken game) == 1
    
    --| Off-chain
    --| Off-chain
    -- Two contracts + 2 param types for 1st & 2nd player
    --  firstGame contract = FirstParams
    -- Don't need fpFirst cause 1st player owns the wallet
  data FirstParams = FirstParams
       { fpSecond           :: !PubKeyHash
       , fpStake            :: !Integer
       , fpPlayDeadline     :: !Slot
       , fpRevealDeadline   :: !Slot 
       , fpNonce            :: !ByteString
       , fpCurrency         :: !CurrencySymbol
       , fpTokenName        :: !TokenName
       , fpChoice           :: !GameChoice
       } deriving (Show, Generic, FromJSON, ToJSON, ToSchema)
       
--| Start of First player contract 
-- get firsr player pubKeyHash
-- use game data type populate fields of game
-- Value v is 1st player stake + NFT
-- first player choice is encrypted
-- submit tx
   firstGame :: forall w s. HasBlockchainActions s => FirstParams -> Contract w s Text ()
   firstGame fp = do
       pkh <- pubKeyHash <$> Contract.ownPubKey 
       let game = Game 
               { gFirst           = pkh
               , gSecond          = fpSecond fp
               , gStake           = fpStake  fp
               , gPlayDeadline    = fpPlayDeadline fp 
               , gRevealDeadline  = fpRevealDeadline fp
               , gToken           = AssetClass (fpCurrency fp, fpTokenName fp)
               }
            v    = lovelaceValueOf (fpStake fp) <> assetClassValue (gToken game) 1
            c    = fpChoice fp
            bs   = sha2_256 $ fpNonce fp 'concatenate' if c == Zero then bsZero else bsOne 
            tx   = Constraints.mustPayToTheScript (GameDatum bs Nothing) v
       ledgerTx <- submitTxConstraints (gameInst game) tx
       void $ awaitTxConfirmed $ txId ledgerTx
       logInfo @String $ "made first move: " ++ show (fpChoice fp)
       
      --| Wait till fpPlayDealine has past for Second player too make a move
       void $ awaitSlot $ 1 * fpPlayDeadline fp
       
      --| find UTxO with NFT 
        m <- findGameOutput game 
        case m of 
           Nothing              -> throwError "game output not found"
            Just (oref, o, dat) -> case dat of
                GameDatum _ Nothing -> do
                    logInfo @String "second player did not play"
                    let lookups = Constraints.unspentOutputs (Map.singleton oref o) <>
                                  Constraints.otherScript (gameValidator game)
                        tx"     = Constraints.mustSpendScriptOutput oref (Redeemer $ PlutusTx.toData ClaimFirst)
                     ledgerTx" <- submitTxConstraintsWith @Gaming lookups tx'
                     void $ awaitTxConfirmed $ txId ledgerTx'
                     logInfo @String "reclaimed stake"
                                  
                GameDatum _ (Just c') | c" == c -> do
                    logInfo @String "second player played and lost"
                    let lookups = Constraints.unspentOutputs (Map.singleton oref o)                                         <>
                                  Constraints.otherScript (gameValidator game)
                         tx"    = Constraints.mustSpendScriptOutput oref (Redeemer $ PlutusTx.toData $ Reveal $ fpNonce fp) <>
                                  Constraints.mustValidateIn (to $ fpRevealDeadline fp)
                    ledgerTx' <- submitTxConstraintsWith @Gaming lookups tx'
                    void $ awaitTxConfirmed $ txId ledgerTx'
                    logInfo @String "victory"
                    
                _ -> logInfo @String "second player played and won" 
                
           data SecondParams = SecondParams
               { spFirst          :: !PubKeyHash
               , spStake          :: !Integer
               , spPlayDeadline   :: !Slot
               , spRevealDeadline :: !Slot
               , spTokenName      :: !TokenName
               , spChoice         :: !GameChoice
               } deriving (Show, Generic, FromJSON, ToJSON, ToSchema)
          --| Using Second player wallet, need 1st player address     
          secondGame :: forall w s. HasBlockchainActions s => SecondParams -> Contract w s Text ()
          secondGame sp = do
              pkh <- pubKeyHash <$> Contract.ownPubKey
              let game = Game 
                      { gFirst          = spFirst sp
                      , gSecond         = pkh 
                      , gStake          = spStake sp
                      , gPlayDeadline   = spPlayDeadline sp
                      , gRevealDeadline = spRevealDeadline sp
                      , gToken          = AssetClass (spCurrency sp, spTokenName sp)
                      }
               m <- findGameOutput game 
               case m of
                   Just (oref, o, GameDatum bs Nothing) -> do
                       logInfo @String "running game found"
                       let token   = assetClassValue (gToken game) 1
                       let v       = let x = lovelaceValueOf (spStake sp) in x <> x <> token
                           c       = spChoice sp 
                           lookups = Constraints.unspentOutputs (Map.singleton oref o)
                                     Constraints.otherScript (gameValidator game)
                                     Constraints.scriptInstanceLookups (gameInst game)
                           tx      = Constraints.mustSpendScriptOutput oref (Redeemer $ PlutusTx.toData $ Play c)
                                     Constraints.mustPayToTheScript (GameDatum bs $ Just c) v
                                     Constraints.mustValidateIn (to $ spPlayDeadline sp)
                         ledgerTx <- submitTxConstraintsWith @Gaming lookups tx
                          let tid = txId ledgerTx
                          void $ awaitTxConfirmed tid 
                          logInfo @String $ "made second move: " ++ show (spChoice sp)
                          
                          void $ awaitSlot $ 1 + spRevealDeadline sp
                          
                         --| If you can still find UTxO 1st player didn't reveal
                         -- Second player claims
                          m' <- findGameOutput game 
                          case m' of
                              Nothing               -> logInfo @String "first player won"
                               Just (oref', o' , _) -> do
                                    logInfo @String "first player didn't reveal"
                                    let lookups' = Constraints.unspentOutputs (Map.singleton oref' o')                             <>
                                                   Constraints.otherScript (gameValidator game)
                                         tx'     = Constraints.mustSpendScriptOutput oref' (Redeemer $PlutusTx.toData ClaimSecond) <>
                                                   Constraints.mustValidateIn (from $ 1 + spRevealDeadline sp)                     <>
                                                   Constraints.mustPayToPubKey (spFirst sp) token
                                     ledgerTx' <- submitTxConstraintsWith @Gaming lookups' tx'
                                     void $ awaitTxConfirmed $ txId ledgerTx'
                                     logInfo @String "second player won"
                                     
                                _ -> logInfo @String "no running game found"
                                
                           type GameSchema = BlockchainActions ./\ Endpoint "first" FirstParams .\/ Endpoint "second" SecondParams
                           
                           endpoints :: Contract () GameSchema Text ()
                           endpoints = (first 'select' second) >> endpoints
                             where 
                               first  = endpoint @"first"  >>= firstGame
                               second = endpoint @"second" >>= secondGame
