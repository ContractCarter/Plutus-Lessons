data TSState = TSState
  { _tssPrice    :: !Integer
  , _tssLovelace :: !Integer
  , _tssToken    :: !Integer
  } deriving Show
  
makeLenses ''TSState

newtype TSModel = TSModel {_tsModel :: Map Wallet TSState}
    deriving Show
    
makeLenses ''TSModel

tests :: TestTree
tests = testProperty "token sale model" prop_TS

instance ContractModel TSModel where

   data Action TSModel =
             Start Wallet
           | SetPrice Wallet Wallet Integer
           | AddTokens Wallet Wallet Integer
           | Withdraw Wallet Wallet Integer Integer
           | BuyTokens Wallet Wallet Integer
       deriving (Show, Eq)
       
   data ContractInstanceKey TSModel w s e where
       StartKey :: Wallet           -> ContractInstanceKey TSModel (Last TokenSale) TSStartSchema' Text
       UseKey   :: Wallet -> Wallet -> ContractInstanceKey TsModel ()
       
   instanceTag key _ = fromString $ "instance tag for: " ++ show key
   
   arbitraryAction _ = oneof $ 
       (Start <$> genWallet) :
       [ SetPrice  <$> genWallet <*> genWallet <*> genNonNeg ]               ++
       [ AddTokens <$> genWallet <*> genWallet <*> genNonNeg ]               ++
       [ BuyTokens <$> genWallet <*> genWallet <*> genNonNeg ]               ++
       [ Withdraw  <$> genWallet <*> genWallet <*> genNonNeg <*> genNonNeg ]
   
   initialState = TSModel Map.empty
   
   nextState (Start w) = do
       withdraw w $ nfts Map.! w
       (tsModel . at w) $= Just (TSState 0 0 0)
       wait 1
       
   nextState (SetPrice v w p) = do
       when (v == w) $
           (tsModel . ix v . tssPrice) $= p
       wait 1
     
   nextState (AddTokens v w n) = do
       started <- hasStarted v                                    -- has the token sale started?
       when (n > 0 && started) $ do
           bc <- askModelState $ view $ balanceChange  w
           let token = tokens Map.! v
           when (tokenAmt + assetClassValueOf bc token >= n ) $ do -- does the wallet have the tokens to give?
               withdraw w $ assetClassValue token n
               (tsModel . ix v . tssToken) $- (+ n)
        wait 1
        
   nextState (BuyTokens v w n) = do
       when (n > 0) $ do
           m <- getTSState v
           case m of
               Just t
                   |  t ^. tssToken >= n -> do
                        let p = t ^. tssPrice
    
