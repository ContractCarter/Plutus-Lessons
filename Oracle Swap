Module Week06.Oracle.Swap
     ( SwapSchema
     , swap
     ) where
     
import            Control.Monad        hiding (fmap)
import            Data.List            (find)
import qualified  Data.Map             as Map
import            Data.Maybe           (mapMaybe)
import            Data.Monoid          (Last (..))
import            Data.Text            (Text)
import            Plutus.Contract       as Contract hiding (when)
import qualified  PlutusTx
import            PlutusTx.Prelude      hiding (Semigroup(..), (<$>), unless, mapMaybe, find)
import            Ledger                hiding (singleton)
import            Ledger.Constraints    as Constraints
import qualified  Ledger.Typed.Scripts  as Scripts
import            Ledger.Ada            as Ada hiding (divide)
import            Ledger.Value          as Value
import            Prelude              (Semigroup (..), (<$>))

import            Week06.Oracle.Core
import            Week06.Oracle.Funds

--| price of token in USD
{-# INLINABLE price #-}
price :: Integer -> Integer -> Integer
price lovelace exchangeRate = (lovelace * exchangeRate) 'divide' 1000000 
--| get Ada + lovelace values
{-# INLINABLE lovelaces #-}
lovelaces :: Value -> Integer
lovelaces = Ada.getLovelace . Ada.fromValue 

--| Seller sells oracle data either collects USD or retrives back ownership
{-# INLINABLE mkSwapValidator #-}
mkSwapValidator :: Oracle -> Address -> PubKeyHash -> () -> ScriptContext -> Bool
