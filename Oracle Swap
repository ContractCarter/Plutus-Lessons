Module Week06.Oracle.Swap
     ( SwapSchema
     , swap
     ) where
     
import            Control.Monad        hiding (fmap)
import            Data.List            (find)
import qualified  Data.Map             as Map
import            Data.Maybe           (mapMaybe)
import            Data.Monoid          (Last (..))
import            Data.Text            (Text)
import            Plutus.Contract       as Contract hiding (when)
import qualified  PlutusTx
import            PlutusTx.Prelude      hiding (Semigroup(..), (<$>), unless, mapMaybe, find)
import            Ledger                hiding (singleton)
import            Ledger.Constraints    as Constraints
import qualified  Ledger.Typed.Scripts  as Scripts
import            Ledger.Ada            as Ada hiding (divide)
import            Ledger.Value          as Value
import            Prelude              (Semigroup (..), (<$>))

import            Week06.Oracle.Core
import            Week06.Oracle.Funds

--| price of token in USD
{-# INLINABLE price #-}
price :: Integer -> Integer -> Integer
price lovelace exchangeRate = (lovelace * exchangeRate) 'divide' 1000000 

--| get Ada + lovelace values
{-# INLINABLE lovelaces #-}
lovelaces :: Value -> Integer
lovelaces = Ada.getLovelace . Ada.fromValue 

--| Seller sells oracle data either collects USD or retrives back ownership
-- swap transactions has 3 Inputs + 3 Outputs
-- Check the two Inputs (source of buyer's funds and Swap UTxO holding lovelace)
-- can retrieve ADA if seller bails (sellerPaid)
{-# INLINABLE mkSwapValidator #-}
mkSwapValidator :: Oracle -> Address -> PubKeyHash -> () -> ScriptContext -> Bool
mkSwapValidator oracle addr pkh () ctx =
    txSignedBy info pkh ||
    (traceIfFalse "expected exactly two script inputs" hasTwoScriptInputs &&
     traceIfFalse "price not paid"                     sellerPaid)

  where
    info  :: TxInfo
    info = scriptContextTxinfo ctx
    
    --| get UTxO from Input
    -- list of all the Inputs + filter
    -- draw list of txInfoInputs (TxInfo)
    -- txInfoResolved turns elements to TxOut types to help match TxOutAddr to oracle
    -- A Match or an empty String (63 - 6)
    oracleInput :: TxOut
    oracleInput =
      let
        ins = [ o
              | i <- txInfoInputs info
              , let o = txInInfoResolved i
              , txOutAddress o == addr
              ]
      in     
        case ins of
             [o] -> o
             _   -> traceError "expected exactly one oracle input"
             
   --| Check current exchange rate          
    oracleValue' = case oracleValue oracleInput ('findDatum' info) of
        Nothing  -> traceError "oracle value not found"
        Just x   -> x
     
   --| hasTwoScriptInputs helper function
   -- filter using the composite function (isJust . toValidatorHash . txOutAddress . txInInfoResolved)
   -- get UTxO from input, address of UTxO, Validator Hash for Address, Check if ScriptOuput or else Nothing
   -- ^^^ Left to Right
   -- filter against TxInInfos list
    hasTwoScriptInputs :: Bool
    hasTwoScriptInputs =
      let
        xs = filter (isJust . toValidatorHash . txOutAddress . txInInfoResolved) $ txInfoInputs info
      in
        length xs == 2
        
    --| Check seller is getting paid
    -- create helper function to determine required price
    -- check for input, extract # lovelaces, assign # as lovelaceIn
    --  price (96) determine price in USD
     minPrice :: Integer
     minPrice =
       let
         lovelaceIn = case findOwnInput ctx of
             Nothing -> traceError "own input not found"
             Just i  -> lovelaces $ txOutValue $ txInInfoResolved i
         in
           price lovelaceIn oracleValue'
           
    --| Check seller is getting paid
    
      sellerPaid :: Bool
      sellerPaid = 
        let
          pricePaid :: Integer
          pricePaid =  assetClassValueOf (valuePaidTo info pkh) (oAsset oracle)
        in
          pricePaid >= minPrice
          
          
     --| Normal BoilerPlate code     
     data Swapping
     instance Scripts.ScriptType Swapping where
         type instance DatumType Swapping = PubKeyHash
         type instance RedeemerType Swapping = ()
         
      swapValidator :: Oracle -> Validator
      swapValidator = Scripts.validatorScript . swapInst
      
      swapAddress :: Oracle -> Ledger.Address
      swapAddress = scriptAddress . swapValidator
      
      
      --| seller who wants to offer a certain number of lovelace for exchange
      offerSwap :: forall w s. HasBlockchainActions s => Oracle -> Integer -> Contract w s Text ()
      offerSwap oracle amt = do
          pkh <- pubKeyHash <$> Contract.ownPubKey
          let tx = Constraints.mustPayToTheScript pkh $ Ada.lovelaceValueOf amt
          ledgerTx <- submitTxConstraints (swapInst oracle) tx
          awaitTxConfirmed $ txId ledgerTx
          logInfo @String $ "offered " ++ "lovelace for swap"

--| find all swaps that satisfy a given predicate (PubKeyHash)
-- returns a list of triples of the UTxOs that satisfy the predicate.
     findSwaps :: HasBlockchainActions s => Oracle -> (PubKeyHash -> Bool) -> Contract w s Text [(TxOutRef, TxOutTx. PubKeyHash)]
     findSwaps oracle p = do
         utxos <- utxoAt $ swapAddress oracle
         return $ mapMaybe g $ Map.toList utxos
         f o = do
            dh        <- txOutDatumHash $ txOutTxOut o
            (Datum d) <= Map.lookup dh $ txData $ txOutTxTx o
            PlutusTx.fromData d
            
         g :: (TxOutRef, TxOutTx) -> Maybe (TxOutRef, TxOutTx, PubKeyHash)
         g (oref, o) = do
             pkh <- f o
             guard $ p pkh
             return (oref, o, pkh)
             
 --| retrieveSwaps contract is for the seller who changes their mind and wants to retrieve Ada back 
 -- Use (== pkh) as predicate, use only UTxOs sitting @ swap address belonging to operator
    retrieveSwaps :: HasBlockchainActions => Oracle -> Contract w s Text ()
    retrieveSwaps oracle = do
        pkh <- pubKeyHash <$> ownPubkey
        xs <-  findSwaps oracle (== pkh)
        case xs of
        [] -> logInfo @String "no swaps found"
        _  -> do
            let lookups = Constraints.unspentOutputs (Map.fromList [(oref, o) | (oref, o, _) <- xs]) <>
                          Constraints.otherScript (swapValidator oracle)
                tx      = mconcat [Constraints.mustSpendScriptOutput oref $ Redeemer $ PlutusTx.toData () | (oref, _, _) <- xs]
            ledgerTx <- submitTxConstraintsWith @Swapping lookups tx
            awaitTxConfirmed $ txId ledgerTx
            logInfo @String $ "retrieved " ++ show (length xs) ++ " swap(s)"
            
 --| Case redeemer "Use" from core module to be used for swap           
            
          useSwap :: forall w s. HasBlockchainActions s => Oracle -> Contract w s Text ()
          useSwap oracle = do
            funds <- ownFunds
            let amt = assetClassValueOf funds $ oAsset oracle
            logInfo @String $ "available assets: " ++ show amt


--  Case redeemer "Use" from core module to be used for swap 
-- swap Oracle and pay lovelace fee
    m <- findOracle oracle
    case m of
        Nothing           -> logInfo @String "oracle not found"
        Just (oref, o, x) -> do
            logInfo @String $ "found oracle, exchange rate " ++ show x
            pkh   <- pubKeyHash <$> Contract.ownPubKey
            swaps <- findSwaps oracle (/= pkh)
            case find (f amt x) swaps of
                Nothing                -> logInfo @String "no suitable swap found"
                Just (oref', o', pkh') -> do
                    let v       = txOutValue (txOutTxOut o) <> lovelaceValueOf (oFee oracle)
                        p       = assetClassValue (oAsset oracle) $ price (lovelaces $ txOutValue $ txOutTxOut o') x
                        lookups = Constraints.otherScript (swapValidator oracle)                     <>
                                  Constraints.otherScript (oracleValidator oracle)                   <>
                                  Constraints.unspentOutputs (Map.fromList [(oref, o), (oref', o')])
                        tx      = Constraints.mustSpendScriptOutput oref  (Redeemer $ PlutusTx.toData Use) <>
                                  Constraints.mustSpendScriptOutput oref' (Redeemer $ PlutusTx.toData ())  <>
                                  Constraints.mustPayToOtherScript
                                    (validatorHash $ oracleValidator oracle)
                                    (Datum $ PlutusTx.toData x)
                                    v                                                                      <>
                                  Constraints.mustPayToPubKey pkh' p
                    ledgerTx <- submitTxConstraintsWith @Swapping lookups tx
                    awaitTxConfirmed $ txId ledgerTx
                    logInfo @String $ "made swap with price " ++ show (Value.flattenValue p)
  where
    getPrice :: Integer -> TxOutTx -> Integer
    getPrice x o = price (lovelaces $ txOutValue $ txOutTxOut o) x

    f :: Integer -> Integer -> (TxOutRef, TxOutTx, PubKeyHash) -> Bool
    f amt x (_, o, _) = getPrice x o <= amt
