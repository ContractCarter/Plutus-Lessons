

--| define data type Game + use parameters
-- players define by public key
-- # of lovelace to stake 
-- Two slots (gPlayDeadline = make a move) + (gRevealDeadline = show how u won)
-- gToken = Arbitrary NFT to identify UTXO 

data Game = Game
    { gFirst          :: !PubKeyHash
    , gSecond         :: !PubKeyHash
    , gStake          :: !Integer
    , gPlayDeadline   :: !Slot
    , gRevealDeadline :: !Slot
    , gToken          :: !AssetClass
    } deriving (Show, Generic, FromJSON, ToJSON, Prelude.Eq, Prelude.Ord)

--| Next, we define the two moves that the players can make (Zero & One)
-- need Plutus Eq for the instance,
-- Inlinable pragma on Plutus Eq for the GameChoice
data GameChoice = Zero | One
    deriving (Show, Generic, FromJSON, ToJSON, ToSchema, Prelude.Eq, Prelude.Ord)

instance Eq GameChoice where
    {-# INLINABLE (==) #-}
    Zero == Zero = True
    One  == One  = True
    _    == _    = False

--| For state, we will use a type called GameDatum.
-- ByteString is the hash that the first player submits
-- Maybe GameChoice is either Just the move of the second player, or Nothing 
-- add constructor Finished for final state transition
 data GameDatum = GameDatum Bytestring (Maybe GameChoice) | Finished
 deriving Show
 
 instance Eq GameDatum where
 {-# INLINABLE (==) #-}
 GameDatum bs mc == GameDatum bs' mc' = (bs == bs') && (mc == mc')
 Finished        == Finished          = True
 _               == _                 = False
 
 PlutusTx.unstableMakeIsData ''GameDatum
 
 data GameRedeemer = Play GameChoice | Reveal ByteString | ClaimFirst | ClaimSecond
     deriving Show 
  
PlutusTx.unstableMakeIsData ''GameRedeemer

{-# INLINABLE lovelaces #-}
lovelaces :: Value -> Integer
lovelaces = Ada.getLovelace . Ada.fromValue

{-# INLINABLE gameDatum #-}
gameDatum :: TxOut -> (DatumHash -> Maybe Datum) -> Maybe GameDatum
gameDatum o f = do 
    dh      <- txOutDatum o
    Datum d <- f dh
    PlutusTx.fromData d
    
 {-# INLINABLE transition #-}
 transition :: Game -> State GameDatum -> GameRedeemer -> Maybe (TxConstraints Void Void, State GameDatum)
 transition game s r = case (stateValue s, stateData s, r) of
     (v, GameDatum bs Nothing, Play c) 
         | lovelaces v  == gStake game        -> Just ( Constraints.mustBeSignedBy (gSecond game)                    <>
                                                        Constraint.mustValidateIn (to $ gPlayDeadline game)
                                                      , State (GameDatum bs $ Just c) (lovelaceValueOf $ 2 * gStake game) 
                                                      )
     (v, GameDatum _ (Just _), Reveal _)
         | lovelaces v == (2 * gStake game)   -> Just ( Constraints.mustBeSignedBy (gFirst game)                      <>
                                                        Constraints.mustValidateIn (to $ gRevealDeadline game)        <>
                                                        Constraints.mustPayToPubKey (gFirst game) token 
                                                      , State Finished mempty
                                                      )
                                                      
     (v, GameDatum _ (Just _), ClaimFirst)
         | lovelaces v == (2 * gStake game)   -> Just ( Constraints.mustBeSignedBy (gFirst game)                      <>
                                                        Constraints.mustValidateIn (from $ 1 + gPlayDeadline game)        <>
                                                        Constraints.mustPayToPubKey (gFirst game) token 
                                                      , State Finished mempty
                                                      )
                                                      
     (v, GameDatum _ (Just _), ClaimSecond _)
         | lovelaces v == (2 * gStake game)   -> Just ( Constraints.mustBeSignedBy (gSecond game)                          <>
                                                        Constraints.mustValidateIn (from $1 + gRevealDeadline game)        <>
                                                        Constraints.mustPayToPubKey (gFirst game) token 
                                                      , State Finished mempty
                                                      )                                                  
                                              -> Nothing 
     _
    where
      token :: Value 
      token = assetClassValue (gToken game) 1
      
    {-# INLINABLE final #-}
    final :: GameDatum -> Bool 
    final Finished = True 
    final _        = False
                                                      
    {-# INLINABLE check #-}
    check :: ByteString -> ByteString -> GameDatum -> GameRedeemer -> ScriptContent -> Bool
    check bsZero' bsOne' (GameDatum bs (Just c)) (Reveal nonce) _ =
         sha2_256 (nonce 'concatenate' if c == Zero then bsZero' else bsOne') == bs
    check _        _      _                       _              _ = True
    
    {-# INLINABLE gameStateMachine #-}
    gameStateMachine :: Game -> ByteString -> ByteString -> StateMachine GameDatum GameRedeemer
    gameStateMachine game bsZero' bsOne' = StateMachine
        { smTransition  = transition game 
        , smFinal       = final 
        , smCheck       = check bsZero' bsOne'
        , smThreadToken = Just $ gToken game 
        }
        
    {-# INLINABLE mkGameValidator #-}
    mkGameValidator :: Game -> ByteString -> ByteString -> GameDatum -> GameRedeemer -> ScriptContext -> Bool
    mkGameValidator game bsZero' bsOne' = mkValidator $ gameStateMachine  bsZero' bsOne'
    
    type Gaming = StateMachine GameDatum GameRedeemer
    
    bsZero, bsOne :: ByteString
    bsZero = "0"
    bsOne  = "1"
    
    gameStateMachine' :: Game -> StateMachine GameDatum Game Redeemer
    gameStateMachine' game = gameStateMachine game bsZero bsOne 
    
    gameInst :: Game -> Scripts.ScriptInstance Gaming
    gameInst game = Scripts.validator @Gaming
        ($$(PlutusTx.compile [|| mkGameValidator ||])
            'PlutusTx.applyCode' PlutusTx.liftCode game
            'PlutusTx.applyCode' PlutusTx.liftCode bsZero
            'PlutusTx.applyCode' PlutusTx.liftCode bsOne)
          $$(PlutusTx.compile [|| wrap ||])
         where
           wrap = Scripts.wrapValidator @GameDatum @GameRedeemer
           
     gameValidator :: Game -> Validator
     gameValidator = Scripts.validatorScript . gameInst
     
     gameAddress :: Game -> Ledger.Address
     gameAddress = scriptAddress . gameValidator 
     
     gameClient :: Game -> StateMacineClient GameDatum GameRedeemer
     gameClient game = mkStateMachineClient $ StateMachineInstance (gameStateMachine' game) (gameInst game)
     
     --| Start contract on 1st player wallet
     -- need second player address
     data FirstParams = FirstParams
         { fpSecond            :: !PubKeyHash
         , fpStake             :: !Integer
         , fpPlayDeadline      :: !Slot
         , fpRevealDeadline    :: !Slot
         , fpNonce             :: !ByteString
         , fpCurrency          :: !CurrencySymbol
         , fpTokenName         :: !TokenName
         , fpChoice            :: !GameChoice
         } deriving (Show, Generic, FromJSON, ToJSON, ToSchema)
     
     --| state machine contracts provided by the state machine module have a specific constraint on the error type
     --  One error type that works is SMContractError
     -- use a helper function to convert the SMContractError type into a Text type
     --  Text as the error type
         mapError' :: Contract w s SMContractError a -> Contract w s Text a
         mapError' = mapError $ pack. show
         
         --| first player contract is shorter 
         firstGame :: forall w s. HasBlockchainActions s => FirstParams -> Contract w s Text ()
         firstGame fp = do
             pkh  <- pubKeyHash <$> Contract.ownPubKey
             let game    = Game 
                     { gFirst             = pkh
                     , gSecond            = fpSecond fp
                     , gStake             = fpStake fp
                     , gPlayDeadline      = fpPlayDeadline fp
                     , gRevealDeadline    = fpRevealDeadline fp
                     , gToken             = AssetClass (fpCurrency fp, fpTokenName fp)
                     }
                 --| Take client + values    
                 client = gameClient game 
                 v      = lovelaceValueOf (fpStake fp)
                 c      = fpChoice fp
                 bs     = sha2_256 $fpNonce fp 'concatenate' if c == Zero then bsZero else bsOne
                 
               --| runIntialise function starts a state machine and creates a UTxO at the state machine address
              void $ mapError @w @s @SMContractError (pack . show) $ runInitialise client (GameDatum bs Nothing) v
              logInfo @String $ "made first move: " ++ show (fpChoice fp)
             
             void $ awaitSlot $ 1 + fpPlayDeadline fp 
              
              m <- mapError' $ getOnChainState client
              case m of 
                  Nothing              -> throwError "game output not found"
                  Just ((o, _), _) -> case tyTxOutData o of 
                  
                       GameDatum _ Nothing -> do 
                           logInfo @String "second player did not play"
                           void $ mapError' $ runStep client ClaimFirst
                           logInfo @String "first player reclaimed stake"
                 
                      GameDatum _ (Just c') | c' == c -> do 
                          logInfo @String "second player played and lost"
                          void $ mapError' $ runStep client $ Reveal $ fpNonce fp
                          logInfo @String "first player revealed and won"
                          
                      _ -> logInfo @String "second player played and won"
                      
                     --| Start contract on Second player Wallet
                     -- need first player address
                     data SecondParams = SecondParams
                          { spFirst          :: !PubKeyHash
                          , spStake          :: !Integer
                          , spPlayDeadline   :: !Slot
                          , spRevealDeadline :: !Slot
                          , spTokenName      :: !TokenName
                          , spChoice         :: !GameChoice
                          } deriving (Show, Generic, FromJSON, ToJSON, ToSchema)
                          
                          
                     --| Second player owns contract 
                     -- set of Game type values
                     
                     secondGame :: forall w s. HasBlockchainAction s ==> SecondParams -> Contract w s Text ()
                     secondGame sp = do
                        pkh <- pubKeyHash <$> Contract.ownPubKey
                        let game = Game 
                                { gFirst           = spFirst sp
                                , gSecond          = pkh
                                , gStake           = spStake sp
                                , gPlayDeadline    = spPlayDeadline sp
                                , gRevealDeadline  = spRevealDeadline sp
                                , gToken           = AssetClass (spCurrency sp, spTokenName sp)
                                }
                            client = gameClient game 
                        m <- mapError $ getOnChainState client
                        case m of
                        Nothing            -> logInfo @String "no running game found"
                        Just ((o, _), _)   -> case tyTxOutData o of
                             GameDatum _ Nothing -> do
                                 logInfo @String "running game found"
                                 void $ mapError' $ runStep client $ Play $ spChoice sp
                                 logInfo @String $ "made second move: " ++ show (spChoice sp)
                               
                                 void $ awaitSlot $ 1 + spRevealDeadline sp
                                 
                             --| UTxO contains NFT       
                                 m' <- mapError' $ getOnChainState client
                                 case m' of 
                                     Nothing -> logInfo @String "first player won"
                                     Just  _ -> do
                                          logInfo @String "first player didn't reveal"
                                          void $ mapError' $ runStep client ClaimSecond
                                          logInfo @String "second player won"
                                          
                           _ -> throwError "unexpected datum"
                           
               type GameSchema = BlockchainActions .\/ Endpoint "first" FirstParams .\/ Endpoint "second" SecondParams
               
               --| We created two on-chain contracts
               -- Make accessible by defining Two endpoints
               -- 1st player & 2nd player + define a contract called Endpoint
               -- Endpoint Contract offers two choices ("first" or "second")
               endpoints :: Contract () GameSchema Text ()
               endpoints = (first 'select' second) >> endpoints
                 where
                   first = endpoint @"first"  >>+ firstGame 
                  second = endpoint @"second" >>= secondGame
            
