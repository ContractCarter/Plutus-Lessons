--|Create a data type that corresponds to one of 3 contracts that'll run eventually
-- Init constructor sets up an environment where USD (CurrencySymbol) Token is available + wallets
-- Oracle constructor = runOracle (start oracle + provide update endpoint)
-- Swap parameter runs swap contract + endpoints (offer, retrieve, use and funds)

{-# LANGUAGE DeriveAnyClass     #-}
{-# LANGUAGE DeriveGeneric      #-}

module Week06.Oracle.PAB
    ( OracleContracts (..)
    ) where

import           Data.Aeson                (FromJSON, ToJSON)
import           Data.Text.Prettyprint.Doc (Pretty (..), viaShow)
import           GHC.Generics              (Generic)
import           Ledger

import qualified Week06.Oracle.Core        as Oracle

data OracleContracts = Init | Oracle CurrencySymbol | Swap Oracle.Oracle
    deriving (Eq, Ord, Show, Generic, FromJSON, ToJSON)

instance Pretty OracleContracts where
    pretty = viaShow



-- boilerplate hooks up data type of OracleContracts
-- reified contract Instances with (schema + 3 contracts)
-- Init won't have any schema, just BlockChainActions
-- Oracle uses OracleSchema & Swap uses SwapSchema
handleOracleContracts ::
    ( Member (Error PABError) effs
    , Member (LogMsg (PABMultiAgentMsg (Builtin OracleContracts))) effs
    )
    => ContractEffect (Builtin OracleContracts)
    ~> Eff effs
--| Init will run initContract
-- runOracle Contract with OracleParams (USD token = currency symbol)
-- Swap will run our swap contract with an oracle value
handleOracleContracts = handleBuiltin getSchema getContract where
    getSchema = \case
        Init     -> endpointsToSchemas @Empty
        Oracle _ -> endpointsToSchemas @(Oracle.OracleSchema .\\ BlockchainActions)
        Swap _   -> endpointsToSchemas @(Oracle.SwapSchema   .\\ BlockchainActions)
    getContract = \case
        Init        -> SomeBuiltin   initContract
        Oracle cs   -> SomeBuiltin $ Oracle.runOracle $ oracleParams cs
        Swap oracle -> SomeBuiltin $ Oracle.swap oracle

--| oracleParams which defines the currency symbol (USDT) + Fees
oracleParams :: CurrencySymbol -> Oracle.OracleParams
oracleParams cs = Oracle.OracleParams
    { Oracle.opFees   = 1_000_000
    , Oracle.opSymbol = cs
    , Oracle.opToken  = usdt
    }
    
--| boilerplate code 
handlers :: SimulatorEffectHandlers (Builtin OracleContracts)
handlers =
    Simulator.mkSimulatorHandlers @(Builtin OracleContracts) []
    $ interpret handleOracleContracts
    
--| initContract function mints USD Tokens and distributes them to the wallets
--  tells the currency symbol for the USD Token.    
initContract :: Contract (Last CurrencySymbol) BlockchainActions Text ()
initContract = do
    ownPK <- pubKeyHash <$> ownPubKey
    cur   <-
        mapError (pack . show)
        (Currency.forgeContract ownPK [(usdt, fromIntegral (length wallets) * amount)]
        :: Contract (Last CurrencySymbol) BlockchainActions Currency.CurrencyError Currency.OneShotCurrency)
    let cs = Currency.currencySymbol cur
        v  = Value.singleton cs usdt amount
    forM_ wallets $ \w -> do
        let pkh = pubKeyHash $ walletPubKey w
        when (pkh /= ownPK) $ do
            tx <- submitTx $ mustPayToPubKey pkh v
            awaitTxConfirmed $ txId tx
    tell $ Last $ Just cs
  where
    amount :: Integer
    amount = 100_000_000    
    
 --| wallets are hardcoded earlier in the code
 -- wallets + tokens are arbitrary
  wallets :: [Wallet]
  wallets = [Wallet i | i <- [1 .. 5]]  

--|main function, which is the entry point for the executable
-- PAB uses a simulator Monad (similar to EmulatorTrace Monad)
-- simulatorMonad can start contracts on wallets, inspect state logs, call endpoints, exct...
-- logString starts PAB Server, startServerDebug returns a value to shutdown
-- cidInit activates Init contract wallet start the instance, and then a value of the reified contract type (1)
-- Currency Symbol (cs) helper function (waitForLast) (124)
-- wait until Init contract is finished (104)
main :: IO ()
main = void $ Simulator.runSimulationWith handlers $ do
    Simulator.logString @(Builtin OracleContracts) "Starting Oracle PAB webserver. Press enter to exit."
    shutdown <- PAB.Server.startServerDebug

    cidInit <- Simulator.activateContract (Wallet 1) Init
    cs      <- waitForLast cidInit
    _       <- Simulator.waitUntilFinished cidInit


--| cidOracle activates Oracle Contract + USD value (cs)
    cidOracle <- Simulator.activateContract (Wallet 1) $ Oracle cs
    liftIO $ writeFile "oracle.cid" $ show $ unContractInstanceId cidOracle
    oracle <- waitForLast cidOracle
    
--| loop over all wallets except (Wallet 1) running oracle, activate swap contract 
--  block until the user presses enter, and then we shutdown the server.
    forM_ wallets $ \w ->
        when (w /= Wallet 1) $ do
            cid <- Simulator.activateContract w $ Swap oracle
            liftIO $ writeFile ('W' : show (getWallet w) ++ ".cid") $ show $ unContractInstanceId cid

    void $ liftIO getLine
    shutdown
    
    --| define waitForLast helper function
    -- read state of the contract by using (tell)
    -- applies JSON value to the provided predicate
    -- if result is Nothing, it waits until the state changes again. if it is Just x, it will return the x.
    waitForLast ::  FromJSON a => ContractInstanceId -> Simulator.Simulation t a
    waitForLast cid =
        flip Simulator.waitForState cid $ \json -> case fromJSON json of 
            Success (Last (Just x)) -> Just x
            _                       -> Nothing
            
    --| Wallets are hardcoded earlier in the code
    -- # of wallets + tokens are arbitrary 
    wallets :: [Wallet]
    wallets = [Wallet i | i <- [1 .. 5]]
    
    usdt :: TokenName

--| Oracle Clients front end
-- read oracle.cid file get oracle instance id
-- recursive function go
-- go looks up current exchange rate
-- if changed call updateOracle endpoint 
-- waits a couple seconds (threadDelay) then continues

main :: IO ()
main = do
    uuid <- read <$> readFile "oracle.cid"
    putStrLn $ "oracle contract instance id: " ++ show uuid
    go uuid Nothing
  where
    go :: UUID -> Maybe Integer -> IO a
    go uuid m = do
        x <- getExchangeRate
        let y = Just x
        when (m /= y) $
            updateOracle uuid x
        threadDelay 5_000_000
        go uuid y

--| Swap Client
-- create a console interface
-- call endpoints
