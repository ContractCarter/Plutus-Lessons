module Week10.Staking 
    { stakeValidator
    } where
    
import           Ledger
import           Ledger.Typed.Scripts         as Scripts
import           Plutus.V1.Ledger.Ada            (Ada (..), fromValue)
import           Plutus.V1.Ledger.Credential     (StakingCredential)
import qualified PlutusTX
import           PlutusTx.Prelude
--|certify Address and reward owner
-- Address must be paid half the total amount 
{-# INLINABLE mkStakingValidator #-}
mkStakingValidator :: Address -> () -> ScriptContext -> Bool
mkStakingValidator addr () ctx = case scriptContextPurpose ctx of 
    Certifying _   -> True 
    Rewarding cred -> traceIfFalse "insufficient reward sharing" $ 2 * paidToAdress >= amount cred
                   -> False
   --| Get total reward through StakingCredential
   -- define info siting in scriptcontext
   -- compute the amount 
  where 
    info :: TxInfo 
    info  = scriptContextTxInfo ctx
    
    --| define total reward amount 
    -- helper function (go) gives a list of creds & integers
    -- call helper function with TxInfo field (txInfoWdr1)
    -- if empty (traceError), if cred + amt match approve
    amount :: StakingCredential -> Integer
    amount cred = go $ txInfoWdr1 info 
      where 
        go :: [(StakingCredential -> Integer
        go [] = traceError "withdrawal not found"
        go ((cred', amt) : xs)
            |  cred' == cred = amt
            |  otherwise     = go xs
            
      --|total # of lovlace paid to address  
      -- Sum up all lovelace values contained in all outputs
      -- foldl loops over all outputs,
      -- extract lovelace in output to accumulator(n), current value 0
      -- get new accumulator 49-50
    paidToAddress :: Integer 
    paidToAddress = foldl f 0 $ txInfoOutputs info
      where
        f :: Integer -> TxOut -> Integer
        f n o
            | txOutAddress o == addr = n + getLovelace (fromValue $ txOutValue o)
            | otherwise              = n
            
stakeValidator :: Address -> StakeValidator
stakeValidator addr = mkStakeValidatorScript $
    $$(PlutusTx.compile [|| \addr' -> wrapStakeValidator $ mkStakingValidator addr' ||])
     PlutusTx.applyCode
     PlutusTx.liftCode addr
             
