import            Control.Monad        (void)
import            Ledger               (Address, ScriptContext)
import qualified  Ledger.Constraints   as Constraints
import qualified  Ledger.Typed Scripts as Scripts
import            Ledger.Value         (Value)
import            Playground.Contract
import            Plutus.Contract
import qualified  PlutusTx
import            PlutusTx.Prelude     hiding (Applicative (..))

data VestingDatum = VestingDatum
    { beneficiary :: PaymentPubKeyHash
    , deadline    :: POSIXTime
    } deriving Show
    
PlutusTx.unstableMakeisData "VestingDatum

{-# INLINABLE mkValidator #-}
mkValidator :: VestingDatum -> () -> ScriptContext -> Bool
mkValidator dat () ctx = traceifFalse "beneficiary's signature missing"  signedByBeneficiary &&
                         traceifFalse "deadline not reached" deadlineReached
  where
    info :: TxInfo
    info = scriptContextTxInfo ctx
    
    --| True only if owner sign Public Key Hash
    signedByBeneficiary :: Bool
    signedByBeneficiary = txSignedBy info $unPaymentPubKeyHash $ beneficiary dat
    
   --| True only if current time interval contained is after deadline
    deadlineReached :: Bool 
    deadlineReached = contains (from $ deadline dat) $ txInfoValidRange info
    
--| Boiler Plate code    
data Vesting
instance Scripts.ValidatorTypes Vesting where 
    type instance DatumType Vesting = VestingDatum
    type instance RedeemerType Vesting = ()

typedValidator :: Scripts.TypedValidator Vesting
typedValidator = Scripts.mkTypedValidator @Vesting
    $$(PlutusTx.compile[|| mkValidator||])
    $$(PlutusTx.compile[|| wrap ||])
    where 
      wrap = Scripts.wrapValidator @VestingDatum @()

validator :: Validator
validator = Scripts.validatorHash typedValidator 

scrAddress :: Ledger.Address
scrAddress = scriptAddress validator

--| Off-chain 
-- Define endpoints params 
data GiveParams = GiveParams
     { gpBeneficiary :: !PaymentPubKeyHash
     , gpDeadline    :: !POSIXTime
     , gpAmount      :: !Integer
     } deriving (Generic, ToJSON, ToSchema)

--|Redeemer a "()" cause beneficary can just check 
-- && consume UTXO
type vestingSchema =
            Endpoint "give" GiveParams
        .\/ Endpoint "grab" ()
        
--| 70-74 compute Datum
-- 75-80 constraint a transaction has an output @ scriptaddress
-- provide Datum & Value
give :: AsContractError e  => GiveParams -> Contract w s e ()
give gp = do
     let dat = VestingDatum
                 {  beneficiary = gpBeneficiary gp
                 ,  deadline    = gpDeadline gp
                 }
           tx = Constraints.mustPayToTheScript dat $ Ada.lovelaceValueOf $ gpAmount gp
        ledger Tx <- submitTxConstraints typedValidator tx
        void $ awaitTxConfirmed $ getCardanoTxId ledgerTx
        logInfo @String $ printf "made a gift of %d lovelace to %s with deadline $s"
            (gpAmount gp)
            (show $ gpBeneficiary gp)
  
 --| 89-92 Check current time, PubkeyHash, and filter only suitable utxos 
 -- 105 suitable utxos is defined with Datum & Output UTXO
 -- 106-110 Check Datum Hash & Output UTXO and get suitable UTXO
 -- 92-103 maping out a list of UTXOs
 
 grab :: forall w s e. AsContractError e => Contract w s e ()
 grab = do 
     now    <- currentTime
     pkh    <- ownPaymentPubKeyHash
     utxos  <- Map.filter (isSuitable pkh now) <$> utxosAt scrAddress
     if Map.null utxos
         then loginfo @String $ "no gifts available"
         else do
              let orefs   = fst <$> Map.toList utxos  
                  lookups = Constraints.unspentOutputs utxos <>
                            Constraints.otherScript validator
                  tx :: TxConstraints Void Void
                  tx      = mconcat [Constraints.mustSpendScriptOutput oref unitRedeemer | oref <- orefs] <>
                            Constraints.mustValidateIn (from now)
               ledgerTx <- submitTxConstraintsWith @Void lookups tx
               void $ awaitTxConfirmed $ getCardanoTxId ledgerTx
               logInfo @String $ "collected gifts"
     where
        isSuitable :: PaymentPubKeyHash -> POSIXTime -> ChainIndexTxOut -> Bool 
        isSuitable pkh now o = case _ciTxOutDatum o of
             Left _   -> False
             Right (Datum e) -> case PlutusTx.fromBuiltinData e of
                 Nothing -> False
                 just d  -> beneficiary d == pkh && deadline d <= now
                 
 endpoints :: Contract () VestingSchema Text ()
 endpoints = awaitPromise (give' 'select' grab') >> endpoints
