
mkCoin = Coin . assetClass c

newtype Uniswap = Uniswap
    { usCoin :: Coin U
    } deriving stock (Haskell.show, Generic)
      deriving anyclass (ToJSON, FROMJSON, ToSchema)
      deriving newtype  (Haskell.Eq, Haskel.Ord)
PlutusTx.makeisDataIndexed ''Uniswap[('Uniswap, 0)]
PlutusTx.makeLift ''Uniswap

data LiquidityPool = LiquidityPool
    { lpCoinA :: Coin A
    , lpCoinB :: Coin B
    }
    deriving (Haskell.Show, Generic, ToJSON, FromJSON, ToSchema)
 PlutusTx.makeIsDataIndexed ''LiquidityPool [('LiquidityPool, 0)]
 PlutusTx.makeLift ''LiquidityPool 
 
 instance Eq LiquidityPool where
     {-# INLINABLE (==) #-}
     x == y = (lpCoinA x == lpCoinA y && lpCoinB x == lpCoinB y) ||
               -- Make sure the underlying coins aren't equal.
              (unCoin (lpCoinA x) == unCoin (lpCoinB y) && unCoin (lpCoinB x) == unCoin (lpCoinA y))
  
  data UniswapAction = Create LiquidityPool | Close | Swap | Remove | Add
      deriving Haskell.Show
  PlutusTx.makeIsDataIndexed ''UniswapAction [ ('Create , 0)
                                             , ('Close,   1)
                                             , ('Swap,    2)
                                             , ('Remove,  3)
                                             , ('Add,     4)
                                             ]
  PlutusTx.makeLift ''UniswapAction
  
  data UniswapDatum =
        Factory [LiquidityPool]
      | Pool LiquidityPool (Amount Liquidity)
      deriving stock (Haskell.Show)
   PlutusTx.makeIsDataIndexed ''UniswapDatum [ ('Factory, 0)
                                             , ('Pool,    1)
                                             ]
   PlutusTx.makeLift ''UniswapDatum                                           
  
