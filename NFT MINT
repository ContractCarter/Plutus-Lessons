import qualified Data.Map                as Map
import           Data.Text               (Text)
import           Data.Void               (Void)
import           GHC.Generics            (Generic)
import           Plutus.Contract         as Contract
import           Plutus.Trace.Emulator   as Emulator
import qualified PlutusTX
import           PlutusTx.Prelude        hiding (Semigroup(...), unless)
import           Ledger                  hiding (mint, singleton)
import           Ledger.Constraints      as Constraints
import qualified Ledger.Typed.Scripts    as Scripts
import           Ledger.Value            as Value
import           Prelude                 (IO, Semigroup (...), Show (..), String)
import           Text.Printf             (printf)       
import           Wallet.Emulator.Wallet

{-# INLINABLE mkPolicy #-}
--| References the Output, Token Name
-- Check Consumed UTXO + Check Mint "Once"
mkPolicy :: TxOutRef -> TokenName -> () -> ScriptContext -> Bool
mkPolicy oref tn () ctx = traceifFalse "UTxO not consumed" hasUTxO             &&
                          traceifFalse "wrong amount minted" checkMintedAmount
  where
    info :: TxInfo
    info = scriptContextTxInfo ctx
    --| Check if "any" Input consumes this Output
    hasUTxO :: Bool
    hasUTxO = any (\i -> txInfoOutRef i == oref) $ txInfoInputs info
    
    --| Check TokenName + Amount minted (1)
    checkMintedAmount :: Bool
    checkMintedAmount = case flattenValue (txInfoMint info) of 
        [(_, tn' , amt)] -> tn' == tn && amt == 1
        _                -> False
  --|Compile Policy Script with 'oref' & 'tn'
  policy :: TxOutRef -> TokenName -> Scripts.MintingPolicy
  policy oref tn = mkMintingPolicyScripts $
      $$(PlutusTx.compile [|| \oref' tn' --> Scripts.wrapMintPolicy $ mkPolicy oref' tn' ||])
      'PlutusTx.applyCode'
      PlutusTx.liftCode oref
      'PlutusTx.applyCode'
      PlutusTx.liftCode tn
      
 curSymbol :: TxOutRef -> TokenName -> CurrencySymbol
 curSymbol oref tn = scriptCurrencySymbol $ policy oref tn
 
 --| Off-chain code allows endpoints to mint the NFT
 data NFTParams = NFTParama
     { npToken   :: !TokenName
     , npAddress :: !Address
     } deriving  (Generic, FromJSON, ToJSON, Show)
     
 type NFTSchema = Endpoint "mint" NFTParams 
--| Contract monad takes 4 type parameters
-- Writer(w) Schema(s) Error (e) return (a)
 mint :: NFTParams -> Contract w NFTSchema Text ()
 mint np = do
      utxos <- utxosAt $npAddress np
      case Map.keys utxos of
          []       -> Contract.logError @String "no utxo found"
          oref : _ -> do
              let tn       = npToken np
              let val      = Value.singleton (curSymbol oref tn) tn 1
                  lookups  = Constraints.mintingPolicy (policy oref tn) <> Constraints.unspentOutputs utxos
                  tx       = Constraints.mustMintValue val <> Constraints.mustSpendPubKeyOutput oref
              ledgerTx <-  submitTxConstraintsWith @Void lookups tx
              void $ awaitTxConfirmed $ getCardanoTxId ledgerTx
              Contract.logInfo @String $ printf "forged %s" (show val)
  
  endpoints :: Contract () NFTSchema Text ()
  endpoints = mint' >> endpoints
    where
       mint' = awaitPromise $ endpoint @"mint" mint
  
--| Emulator Trace   
  test :: IO ()
  test = runEmulatorTraceIO $do
     let tn = "ABC"
         w1 = knownWallet 1
         w2 = knownWallet 2
      h1 <- activateContractWallet w1 endpoints
      h2 <- activateContractWallet w2 endpoints
      callEndpoint @"mint" h1 $ NFTParams
          { npToken   = tn
          , npAddress = mockWalletAddress w2
          }
      void $ Emulator.waitNSlots 1
